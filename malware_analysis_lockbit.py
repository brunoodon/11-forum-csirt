import requests
import json
import hashlib
import sys
from virus_total_apis import PublicApi as VirusTotalPublicApi
from pymisp import (MISPEvent, MISPSighting, MISPTag, MISPOrganisation, MISPObject)
from pymisp import MISPEvent, MISPObject, PyMISP, ExpandedPyMISP, MISPSharingGroup
import requests
import sys
import datetime
import json
import os
import time
import pandas as pd
vt_api_key = 'dc3798d6c98f2a86cffecc741200bcf4d980687190e1d12d63842aabebba3db0'
today=str(datetime.date.today())
misp_url = "https://misp.brunoodon.com.br"
key = '73RhcpLzFq38Ts5vLO0xhlcF4zEbRFJih8iRiKdw'
misp_verifycert = False
misp = ExpandedPyMISP(misp_url, key, misp_verifycert)
event = MISPEvent()
event.info = "Malware Analysis - "+today+""
event.analysis = "2"
event.published = True
event.distribution = "3"
#event.sharing_group_id = "3"
event.threat_level_id = "1"
event.add_tag('tlp:clear')
event.add_tag('Malware')
#event.add_tag('Lockbit3.0')
#url_md5 = '/root/11-forum-csirt/hash-md5'
url_md5 = 'https://raw.githubusercontent.com/crocodyli/BR-Forum-CSIRTs/main/LockBit-Hash/hash-md5'
url_sha1 = 'https://raw.githubusercontent.com/crocodyli/BR-Forum-CSIRTs/main/LockBit-Hash/hash-sha1'
url_sha256 = 'https://raw.githubusercontent.com/crocodyli/BR-Forum-CSIRTs/main/LockBit-Hash/hash-sha256'
names=['hash']
r_md5 = pd.read_csv(url_md5, names=names)
r_sha1 = pd.read_csv(url_sha1, names=names)
r_sha256 = pd.read_csv(url_sha256, names=names)
print(r_md5)
for a in r_md5['hash']:
  try:
    vt = VirusTotalPublicApi(vt_api_key)
    response_md5 = vt.get_file_report(md5)
    json_doc_md5 = json.dumps(response_md5, sort_keys=False, indent=1)
#      print(json_doc)
    try:
    #inserindo os MD5
      for x in json.loads(json_doc_md5)['results']['scans']:
        if x == 'Microsoft' or x == 'TrendMicro' or x == 'Kaspersky':
          threat_name = json.loads(json_doc_md5)['results']['scans'][''+x+'']['result']
          if threat_name != None:
            print(threat_name)
            event.add_attribute('md5', str(a), disable_correlation=True, to_ids=False)
            event.add_attribute_tag(""+str(x)+":"+str(threat_name)+"", str(a))
            time.sleep(15)
    except:
      print('Não tem resultado do VT')
  except:
    print('None')
for a in r_sha1['hash']:
  try:
    vt = VirusTotalPublicApi(vt_api_key)
    response_sha1 = vt.get_file_report(a)
    json_doc_sha1 = json.dumps(response_sha1, sort_keys=False, indent=1)
#      print(json_doc)
    try:
    #inserindo os MD5
      for x in json.loads(json_doc_sha1)['results']['scans']:
        if x == 'Microsoft' or x == 'TrendMicro' or x == 'Kaspersky':
          threat_name = json.loads(json_doc_sha1)['results']['scans'][''+x+'']['result']
          if threat_name != None:
            print(threat_name)
            event.add_attribute('sha1', str(a), disable_correlation=True, to_ids=False)
            event.add_attribute_tag(""+str(x)+":"+str(threat_name)+"", str(a))
            time.sleep(15)
    except:
      print('Não tem resultado do VT')
  except:
    print('None')
for a in r_sha256['hash']:
  try:
    vt = VirusTotalPublicApi(vt_api_key)
    response_sha256 = vt.get_file_report(a)
    json_doc_sha256 = json.dumps(response_sha256, sort_keys=False, indent=1)
#      print(json_doc)
    try:
    #inserindo os MD5
      for x in json.loads(json_doc_sha256)['results']['scans']:
        if x == 'Microsoft' or x == 'TrendMicro' or x == 'Kaspersky':
          threat_name = json.loads(json_doc_sha256)['results']['scans'][''+x+'']['result']
          if threat_name != None:
            print(threat_name)
            event.add_attribute('sha256', str(a), disable_correlation=True, to_ids=False)
            event.add_attribute_tag(""+str(x)+":"+str(threat_name)+"", str(a))
            time.sleep(15)
    except:
      print('Não tem resultado do VT')
  
  except:
    print('NONE')
event = misp.add_event(event)
